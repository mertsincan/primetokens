{"version":3,"sources":["../src/runner.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import core from '@actions/core';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { cmd } from './utils';\n\nexport async function run() {\n    try {\n        // inputs\n        const tokensPath = core.getInput('TOKENS_PATH');\n        const publicKey = core.getInput('PUBLIC_KEY');\n        const outputDir = core.getInput('OUTPUT_DIR');\n\n        if (!publicKey) {\n            core.setFailed('Required inputs are missing: PUBLIC_KEY');\n\n            return;\n        }\n\n        /*const response = await fetch(`${apiUrl}/theme/figma`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRF-Token': csrfToken\n            },\n            body: JSON.stringify({\n                name: themeName,\n                figma_tokens: {},\n                project: 'primevue',\n                base: 'Figma',\n                config: {\n                    font_size: '14px',\n                    font_family: 'Inter var'\n                }\n            })\n        });\n\n        if (!response.ok) {\n            core.setFailed(`Fetch failed with status ${response.status}`);\n\n            return;\n        }\n\n        const data = await response.json();*/\n\n        const tokensRaw = fs.readFileSync(tokensPath, 'utf-8');\n        const tokensJson = JSON.parse(tokensRaw);\n\n        const data = {\n            publicKey,\n            ...tokensJson\n        };\n\n        if (!fs.existsSync(outputDir)) {\n            fs.mkdirSync(outputDir, { recursive: true });\n        }\n\n        const outputPath = path.resolve(outputDir, 'generated_tokens.json');\n\n        fs.writeFileSync(outputPath, JSON.stringify(data, null, 2), 'utf-8');\n\n        // eslint-disable-next-line no-console\n        console.log('Theme tokens generated successfully!');\n\n        cmd('git config user.name \"Github Actions Bot\"');\n        cmd('git config user.email \"<>\"');\n        cmd('git add .');\n        cmd('git commit -m \"Update Prime Tokens\"', () => {\n            // eslint-disable-next-line no-console\n            console.log('No changes to commit');\n        });\n\n        cmd('git push');\n    } catch (error) {\n        core.setFailed((error as Error).message);\n    }\n}\n","import { execSync } from 'child_process';\n\nexport function cmd(command: string, errorHandler?: (error: unknown) => void): void {\n    try {\n        execSync(command, { stdio: 'inherit' });\n    } catch (error: unknown) {\n        errorHandler?.(error);\n    }\n}\n","import { run } from './runner';\n\nrun();\n"],"mappings":"o7BAAA,IAAAA,EAAiB,8BACjBC,EAAe,mBACfC,EAAiB,qBCFjB,IAAAC,EAAyB,yBAElB,SAASC,EAAIC,EAAiBC,EAA+C,CAChF,GAAI,IACA,YAASD,EAAS,CAAE,MAAO,SAAU,CAAC,CAC1C,OAASE,EAAgB,CACrBD,GAAA,MAAAA,EAAeC,EACnB,CACJ,CDHA,SAAsBC,GAAM,QAAAC,EAAA,sBACxB,GAAI,CAEA,IAAMC,EAAa,EAAAC,QAAK,SAAS,aAAa,EACxCC,EAAY,EAAAD,QAAK,SAAS,YAAY,EACtCE,EAAY,EAAAF,QAAK,SAAS,YAAY,EAE5C,GAAI,CAACC,EAAW,CACZ,EAAAD,QAAK,UAAU,yCAAyC,EAExD,MACJ,CA4BA,IAAMG,EAAY,EAAAC,QAAG,aAAaL,EAAY,OAAO,EAC/CM,EAAa,KAAK,MAAMF,CAAS,EAEjCG,EAAOC,EAAA,CACT,UAAAN,GACGI,GAGF,EAAAD,QAAG,WAAWF,CAAS,GACxB,EAAAE,QAAG,UAAUF,EAAW,CAAE,UAAW,EAAK,CAAC,EAG/C,IAAMM,EAAa,EAAAC,QAAK,QAAQP,EAAW,uBAAuB,EAElE,EAAAE,QAAG,cAAcI,EAAY,KAAK,UAAUF,EAAM,KAAM,CAAC,EAAG,OAAO,EAGnE,QAAQ,IAAI,sCAAsC,EAElDI,EAAI,2CAA2C,EAC/CA,EAAI,4BAA4B,EAChCA,EAAI,WAAW,EACfA,EAAI,sCAAuC,IAAM,CAE7C,QAAQ,IAAI,sBAAsB,CACtC,CAAC,EAEDA,EAAI,UAAU,CAClB,OAASC,EAAO,CACZ,EAAAX,QAAK,UAAWW,EAAgB,OAAO,CAC3C,CACJ,GEzEAC,EAAI","names":["import_core","import_node_fs","import_node_path","import_child_process","cmd","command","errorHandler","error","run","__async","tokensPath","core","publicKey","outputDir","tokensRaw","fs","tokensJson","data","__spreadValues","outputPath","path","cmd","error","run"]}